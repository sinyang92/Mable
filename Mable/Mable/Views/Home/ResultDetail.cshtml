
@{
    ViewBag.Title = "Detail";
    Layout = "~/Views/Shared/_LayoutSearch.cshtml";
}
<style>
    .stars-outer {
        display: inline-block;
        position: relative;
        font-family: Font Awesome\ 5 Free;
    }

        .stars-outer::before {
            content: "\f005 \f005 \f005 \f005 \f005";
        }

    .stars-inner {
        position: absolute;
        top: 0;
        left: 0;
        white-space: nowrap;
        overflow: hidden;
        width: 0;
        font-family: Font Awesome\ 5 Free;
    }

        .stars-inner::before {
            content: "\f005 \f005 \f005 \f005 \f005";
            color: #f8ce0b;
        }

    .gm-style div {
        background-repeat: no-repeat;
    }

    .mable-publicRating {
        color: #ffd000;
        transform: scale(1.4);
        padding: 0 5px;
        opacity: 1 !important;
    }
</style>

@model Mable.Classes.PlaceDetail.Result
@using Mable.Controllers;

<script src='~/Scripts/nprogress.js'></script>
<link rel='stylesheet' href='~/Content/css/nprogress.css' />

<script>
    $(document).ready(function () {
        NProgress.start();
    })

    window.onload = function () {
        NProgress.done();
    }
</script>

<div class="section">
    <div class="container-fluid">
        <div class="row">

            <!-- Start Details Content -->
            <div class="col-sm-10 col-sm-offset-1 mable-detail">
                <!-- back button -->
                <div class="row mable-detailBackButton">
                    <a href="javascript:history.back()"><i class="fas fa-chevron-left"></i> Back to the List</a>
                </div>

                <div class="mable-topicHeading">
                    Place Information
                </div>
                <!-- Image and Place Details -->
                <div class="row mable-placeInfo">

                    <!-- Place Photo -->
                    <div class="col-md-5 mable-detail-image text-center">
                        <img class="img-responsive" src="https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=@Model.photo_reference&key=AIzaSyDvXKR7iiGAvHykADgGEOxuurUSr4ukJ08" />

                    </div>
                    <!-- End Photo -->
                    <!-- Place details -->
                    <div class="col-md-7" style="padding-left: 40px;">

                        <!-- Place Title -->
                        <h1 class="mable-detail-name">
                            @Model.name
                        </h1>
                        <div class="mable-detail-rating">
                            <h5>Google Rating:</h5>
                            @*<i class="fas fa-star" data-toggle=“tooltip” title='Google rating'></i>*@

                            <div class="rate" style="display: inline-block;">
                                <div class="stars-outer">
                                    <div class="stars-inner"></div>
                                </div>

                            </div>
                            @Model.rating
                        </div>
                        <div class="mable-detail-website">
                            <h5>Website:</h5>
                            <a href="@Model.website">@Model.website</a>
                        </div>
                        <div class="mable-detail-price">

                        </div>
                        <div class="mable-detail-address">
                            <h5>Address:</h5>
                            @Model.formatted_address
                        </div>
                        <div class="mable-detail-phone">
                            <h5>Phone:</h5>
                            @Model.formatted_phone_number
                        </div>

                        <div class="mable-detail-counter" style="border: 3px solid black; padding: 10px; margin-top:10px;">

                            <h5 style="display: inline-block;">Public Accessibility Rating: </h5>

                            <div style="display: inline-block; padding-right: 10px; vertical-align: middle;">
                                <i id="fa-ban" class="fas fa-question-circle" style="font-size: 30px; opacity:0.2;" data-toggle="tooltip" title="Not rated"></i>
                                <i id="fa-frown" class="fas fa-frown" style="font-size: 30px; opacity:0.2;" data-toggle="tooltip" title="Not wheelchair accessible - all entrances have steps"></i>
                                <i id="fa-meh" class="fas fa-meh" style="font-size: 30px; opacity:0.2;" data-toggle="tooltip" title="Partially wheelchair accessible - alternative entrance is step free"></i>
                                <i id="fa-smile" class="fas fa-smile" style="font-size: 30px; opacity:0.2;" data-toggle="tooltip" title="Totally wheelchair accessible - main entrance is step free"></i>
                            </div>
                           
                            <p style="font-size: 14px; font-weight:300;">Contribute by giving your feedback</p>
                            <div id="rating_btns" style="display: inline-block;">
                                <div style="display: inline-block;">
                                    <button title="Add one point" class="btn btn-sm mable-accRatingButton" id="rateBtn3" onclick="AjaxUpdateRating_lv3()"> Accessible @*@Model.rating_lv3*@</button>
                                </div>
                                <div style="display: inline-block;">
                                    <button title="Add one point" class="btn btn-sm mable-accRatingButton" id="rateBtn2" onclick="AjaxUpdateRating_lv2()"> Partially Accessible @*@Model.rating_lv2*@</button>
                                </div>
                                <div style="display: inline-block;">
                                    <button title="Add one point" class="btn btn-sm mable-accRatingButton" id="rateBtn1" onclick="AjaxUpdateRating_lv1()">  Not Accessible @*@Model.rating_lv1*@</button>
                                </div>
                            </div>
                            <div id="text_rated" style="display:none">
                                Thank you for your feedback!
                            </div>

                            @*<button id="rateBtn4" onclick="AjaxUpdateRating_lv4()">@Model.rating_lv4</button>*@
                        </div>


                    </div>
                    <!-- End place details -->
                </div>
                <!--End row-->
                <!-- Start Buttons-->
                <div class="row mable-mapButtons-details">
                    <div class="mable-topicHeading">
                        Accessibility Surroundings
                    </div>
                    <div class="col-md-12">

                        <ul id="buttons" class="nav nav-tabs nav-justified">
                            <li>
                                <div class="">
                                    <input type="checkbox" name="filter" class='btn-map' id="stp" onclick="showSteepness(this)">
                                    <label class="btn mable-btn-map" for='stp'><p>Footpath Steepness</p> <img height="30" class="btn-block" src="~/Content/images/icon-steepness.svg" /></label>
                                </div>
                            </li>
                            <li class="">
                                <div class="">
                                    <input type="checkbox" name="filter" class='btn-map' id="dev" onclick="showDevelopment(this)">
                                    <label class="btn mable-btn-map" for='dev'><p>Development Activities</p> <img height="30" class="btn-block" src="~/Content/images/icon-dev-activity.svg" /></label>
                                </div>
                            </li>
                            <li>
                                <div class="">
                                    <input type="checkbox" name="filter" class='btn-map' id="ped" onclick="showPed(this)">
                                    <label class="btn mable-btn-map" for='ped'><p>Pedestrian Congestion</p> <img height="30" class="btn-block" src="~/Content/images/icon-congestion.svg" /></label>
                                </div>
                            </li>

                            @*<li>
                                    <div class="">
                                        <input type="checkbox" name="filter" class='btn-map' id="con" onclick="showCondition(this)">
                                        <label class="btn mable-btn-map" for='con'><p>Road Condition</p> <img class="btn-block" height="30" src="~/Content/images/icon-path-condition.svg" /></label>
                                    </div>
                                </li>*@
                            <li>
                                <div class="">
                                    <input type="checkbox" name="filter" class='btn-map' id="sensor" onclick="showSensor(this)">
                                    <label class="btn mable-btn-map" for='sensor'><p>Available On-Street Parking</p> <img height="30" class="btn-block" src="~/Content/images/icon-parking.svg" /></label>
                                </div>
                            </li>

                            <li>
                                <div class="">
                                    <input type="checkbox" name="filter" class='btn-map' id="park" onclick="showPark(this)">
                                    <label class="btn mable-btn-map" for='park'><p>Off-Street Parking</p><img height="30" class="btn-block" src="~/Content/images/icon-parking.svg" /></label>
                                </div>
                            </li>


                        </ul>

                    </div>
                </div>
                <!-- End buttons-->
                <!--Start map and info-->
                <div class="row">

                    <!-- Start Map-->
                    <div class="col-lg-8 mable-columns">
                        @*<div class="mable-topicHeading">
                                Map
                            </div>*@
                        <!-- Start place Map -->
                        <div class="row mable-detail-map clearfix">
                            <div class="col-md-12">
                                <div name="place location" id="map" style="min-height: 300px;"></div>
                            </div>
                        </div>
                        <!-- End place map -->
                    </div>
                    <!-- End Map-->
                    <!-- Start Map Info-->
                    <div class="col-lg-4 mable-columns">
                        <div class="row">

                            <!-- Start information section -->
                            <div class="tab-content">
                                <div id="initialContent" class="tab-pane fade in active">
                                </div>
                                <div id="tabContent1" class="tab-pane fade">
                                    <div class="mable-topicHeading">
                                        Information
                                    </div>
                                    <p>The areas shown in dark grey displays the under construction areas.</p>


                                </div>
                                <div id="tabContent2" class="tab-pane fade">
                                    <div class="mable-topicHeading">
                                        Information
                                    </div>
                                    <p>The colors on the map show different gradient and accessibility information.</p>
                                    <p><img src="~/Content/images/steepness-1.svg" width="30" /> Flat and totally accessible</p>
                                    <p><img src="~/Content/images/steepness-2.svg" width="30" /> Manageable steepness</p>

                                    <p><img src="~/Content/images/steepness-3.svg" width="30" /> Uncomfortable and challenging steepness.</p>

                                </div>
                                <div id="tabContent3" class="tab-pane fade">
                                    <div class="mable-topicHeading">
                                        Information
                                    </div>
                                    <p>
                                        If you click the marker, parking type and capacity will be shown.
                                        There are two parking types available:
                                        <ul>
                                            <li>Paid parking</li>
                                            <li>Parking for staff, visitors or customers</li>
                                        </ul>
                                    <p><img src="~/Content/cluster/m1.png" width="30" /> The clusters represents different spots/places grouped together for easier view. Zoom on the clusters to get more detailed view.</p>
                                    </p>
                                </div>
                                <div id="tabContent4" class="tab-pane fade">
                                    <div class="mable-topicHeading">
                                        Information
                                    </div>

                                    <p>Click the marker and today’s predicted pedestrian congestion trend will show in a bar chart for every hour.</p>

                                    <div id="tableauViz" style="width: 100%; height:200px;"></div>

                                </div>

                                <div id="tabContent5" class="tab-pane fade">
                                    <div class="mable-topicHeading">
                                        Information
                                    </div>
                                    <p><img src="~/Content/cluster/m1.png" width="30" /> The clusters represents different spots/places grouped together for easier view. Click on the clusters to get more detailed view.</p>
                                    <p>Get the real-time information about unoccupied on-street parking bays by refreshing the web page. </p>
                                </div>
                            </div>
                        </div>
                        <!-- End Information section -->
                        <!-- Start action section-->
                        @*<div class="row mable-actionSection">
                                <div class="mable-topicHeading">
                                    Actions
                                </div>
                            </div>*@
                        <!-- End action section -->
                        <!-- Start action section-->
                        <div class="row mable-actionSection">
                            <div class="mable-topicHeading">
                                Options
                            </div>
                            <button class="btn mable-btn-primary-outline" onclick="requestFullscreen()">Fullscreen</button>

                            <input type="checkbox" name="route" class="btn-map" id="route" onclick="showRoute(this)">
                            <label class="btn mable-btn-primary-outline" for='route'>Show Route</label>
                            <!-- Travel mode selector -->
                            <div id="floating-panel" style="display:none">
                                <p>Model of Travel:</p>
                                <select id="mode">
                                    <option value="DRIVING">Driving</option>
                                    <option value="WALKING">Walking</option>
                                    <option value="TRANSIT">Public Transport</option>
                                </select>
                            </div>

                            <!--- Arrival Time-->
                            <div id="arrival-time">
                                <!-- Hi Sin, here you can add the code for arrival time -->

                            </div>

                        </div>
                        <!-- End action section -->
                    </div>
                    <!-- End Map Info-->

                </div>
                <!--End map and info-->
                @*<div id="tableauViz"></div>*@
                <!-- Start Other Actions-->
                <div class="row mable-detail-moreActions">
                    <div class="col-lg-12">
                        <div class="mable-topicHeading">
                            how to get there
                        </div>

                    </div>
                    <div class="col-lg-4">
                        <button class="btn mable-btn-primary-outline" onclick="window.open('https://www.google.com/maps/dir/?api=1&destination=@Model.geometry.location.lat,@Model.geometry.location.lng')">
                            Open in Google Map
                        </button>
                        <button class="btn mable-btn-primary-outline" onclick="showPrintPreview()">Print Map</button>


                    </div>
                    @*<div class="col-lg-4">
                            <button class="btn mable-btn-primary-outline">Mobility Map</button>
                        </div>*@
                    @*<div class="col-lg-4">

                        </div>*@
                </div>
                <!-- End Other Actions-->
            </div>

        </div>

    </div>

</div>

<ul class="nav nav-tabs" style="display:none">
    <li class="active"><a data-toggle="tab" href="#initialContent" id="initialTab">initialTab</a></li>
    <li><a data-toggle="tab" href="#tabContent1" id="tab1">tab1</a></li>
    <li><a data-toggle="tab" href="#tabContent2" id="tab2">tab2</a></li>
    <li><a data-toggle="tab" href="#tabContent3" id="tab3">tab3</a></li>
    <li><a data-toggle="tab" href="#tabContent4" id="tab4">tab4</a></li>
    <li><a data-toggle="tab" href="#tabContent5" id="tab5">tab5</a></li>
</ul>

<!--Tooltip-->
<script>
    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip();
    });
</script>

<script src="https://public.tableau.com/javascripts/api/tableau-2.min.js"></script>
<script>
    //$(document).ready(function () {
    //    console.log("ready!");
    //    initializeViz();
    //})
    var markerCluster_park;


    var viz;
    function initializeViz(id, date) {
        var containerDiv = document.getElementById("tableauViz");
        if (typeof viz != 'undefined') {
            viz.dispose();
        }
        url = "https://public.tableau.com/views/AvgPedV4/Sheet1?:embed=y&:display_count=yes&publish=yes",
            options = {
                "Sensor ID": id,
                "Date": date,
                hideToolbar: true,
                hideTabs: true
            };

        viz = new tableau.Viz(containerDiv, url, options);

    }

</script>

@*<script>
        var activeSheet;
        var workbook;
        $(document).ready(function () {
            console.log("ready!");
            initializeViz();
            applyFilterOnSheet(5);

        })
        function initializeViz() {


            var placeholderDiv = document.getElementById("tableauViz");
            var options = {

                width: "100%",
                height: "500px",
                onFirstInteractive: function () {
                    workbook = viz.getWorkbook();
                    activeSheet = workbook.getActiveSheet();
                }
            };
            //var url = 'https://public.tableau.com/views/AvgPedTrendV2/PedestrianCongestion?:embed=y&:display_count=yes&publish=yes';
            var url = 'https://public.tableau.com/views/AvgPedTrendV3/PedestrianCongestion?:embed=y&:display_count=yes&publish=yes';

            viz = new tableauSoftware.Viz(placeholderDiv, url, options);
        }
        function applyFilterOnSheet(id) {

            activeSheet.applyFilterAsync(
                "Sensor ID",
                id,
                tableau.FilterUpdateType.REPLACE);
           }
    </script>*@
<script>


    const ratings = {
       rate: @Model.rating
    };
    // total number of stars
    const starTotal = 5;
    for (const rating in ratings) {
        const starPercentage = (ratings[rating] / starTotal) * 100;
        const starPercentageRounded = `${(Math.round(starPercentage / 10) * 10)}%`;
        document.querySelector(`.${rating} .stars-inner`).style.width = starPercentageRounded;
    }

    if (@Model.rating_lv1  == 0 && @Model.rating_lv2  == 0 && @Model.rating_lv3  == 0) {
        document.getElementById("fa-ban").classList.add("mable-publicRating");
    } else {
        var avg = (@Model.rating_lv2 + (2 * @Model.rating_lv3)) / (@Model.rating_lv1 + @Model.rating_lv2 + @Model.rating_lv3);
        if (avg <= 0.5) {
            document.getElementById("fa-frown").classList.add("mable-publicRating");
        }
        if (avg > 0.5 && avg <= 1.3) {
            document.getElementById("fa-meh").classList.add("mable-publicRating");
        }
        if (avg > 1.3) {
            document.getElementById("fa-smile").classList.add("mable-publicRating");
        }
    }

    
</script>

<script>

    var map;

    var directionsDisplay;

    var layer_condition;
    var layer_dev;
    var layer_footpath;

    var sensor_markers = [];
    var ped_markers = [];
    var infowindow_parking;
    var infowindow_sensor;
    var park_markers = [];
    var current_location = [];
    var currentLatLng;

    function initMap() {
        var lat = @Model.geometry.location.lat;
        var lng = @Model.geometry.location.lng;
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: lat, lng: lng },
            zoom: 15,
            clickableIcons: false
            //gestureHandling: 'none'
        });

        layer_condition = new google.maps.Data();
        layer_dev = new google.maps.Data();
        layer_footpath = new google.maps.Data();

        var infowindow = new google.maps.InfoWindow();

        // Try HTML5 geolocation
        //if (navigator.geolocation) {
        //    navigator.geolocation.getCurrentPosition(function (position) {
        //        var pos = {
        //            lat: position.coords.latitude,
        //            lng: position.coords.longitude
        //        };
        //        infowindow.setPosition(pos);
        //        infowindow.setContent('Your current location');
        //        currentLatLng = new google.maps.LatLng(current_location[0], current_location[1]);
        //        //map.setCenter(pos);
        //    }, function () {
        //        handleLocationError(true, infowindow, map.getCenter());
        //    });
        //} else {
        //    handleLocationError(false, infowindow, map.getCenter());
        //}

        var service = new google.maps.places.PlacesService(map);

        service.getDetails({
            placeId: '@Model.place_id'
        }, function (place, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                var marker = new google.maps.Marker({
                    map: map,
                    position: place.geometry.location
                });
                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                        place.formatted_address + '</div>');
                    infowindow.open(map, this);
                });
            }
            });

        /**
            * Off street parking markers
            */
        // this is the icon for showing private parkings
        var icon3_P = {
            url: "../../Content/images/marker-parking-new.svg", // url
            scaledSize: new google.maps.Size(20, 27.57), // scaled size
            origin: new google.maps.Point(0, 0), // origin
            anchor: new google.maps.Point(0, 0) // anchor
        }

        // the icon to show commercial parkings
        var icon3_C = {
            url: "../../Content/images/marker-parking.svg", // url
            scaledSize: new google.maps.Size(20, 27.57), // scaled size
            origin: new google.maps.Point(0, 0), // origin
            anchor: new google.maps.Point(0, 0) // anchor
        };

        // Create marker for showing parking type and parking spaces
        $.getJSON("https://data.melbourne.vic.gov.au/resource/9xmh-yeh2.json",
            function (data) {
                for (var i = 0; i < data.length; i++) {
                    var icon;

                    if (data[i].parking_type == "Residential") {
                        continue;
                    }
                    if (data[i].parking_type == "Commercial") {
                        data[i].parking_type = "Pay & Park";
                        icon = icon3_C;
                    }
                    if (data[i].parking_type == "Private") {
                        data[i].parking_type = "Parking for staff,visitors or customers";
                        icon = icon3_P;
                    }
                    var coor = { lat: parseFloat(data[i].y_coordinate), lng: parseFloat(data[i].x_coordinate_2) };
                    var park_marker = new google.maps.Marker({
                        position: coor,
                        map: map,
                        visible: false,
                        icon: icon,
                        title: "Click for details"
                    });
                    var content = '<div>' + 'Parking Type: ' + data[i].parking_type + '</div>' +
                        '<div>' + 'Parking Spaces: ' + data[i].parking_spaces + '</div>';
                        //+
                        //'<div>' + '<a href="' + 'https://www.google.com/maps/dir/?api=1&origin='
                        //+ current_location[0] + ',' + current_location[1]
                        //+ '&destination=' + data[i].y_coordinate + ',' + data[i].x_coordinate_2 + '" target="_blank"">Navigate Me</a>' + '</div>';
                    park_marker.content = content;
                    infowindow_parking = new google.maps.InfoWindow();
                    google.maps.event.addListener(park_marker, 'click', function () {
                        infowindow_parking.setContent(this.content);
                        infowindow_parking.open(this.getMap(), this);
                    })
                    park_markers.push(park_marker);
                }
            });

        //  3D development
        var dev_geojson = @Html.Raw(ViewBag.dev);
        layer_dev.addGeoJson(dev_geojson);

        layer_dev.setStyle(function (feature) {
                    var status = feature.getProperty('status');
                    if (status == 'UNDER CONSTRUCTION') {
                        return {
                            fillColor: 'black',
                            strokeWeight: 1
                        };
                    }
        });

        //layer_dev.setStyle(function (feature) {
        //            var status = feature.getProperty('status');
        //            if (status == 'UNDER CONSTRUCTION') {
        //                return {
        //                    fillColor: 'black',
        //                    strokeWeight: 1
        //                };
        //            }
        //});


        //foothpath steepness
        var s1 = performance.now();
        var stp_geojson = @Html.Raw(ViewBag.stp);
        var e1 = performance.now();
        console.log("1: " + (e1 - s1));

        var s2 = performance.now();
        layer_footpath.addGeoJson(stp_geojson);
        var e2 = performance.now();
        console.log("2: " + (e2 - s2));


        var s3 = performance.now();
        layer_footpath.setStyle(function (feature) {
            var grade = feature.getProperty('gradepc');
            console.log("abc");
            if (grade > 0 && grade <= 1) {

                return {
                    fillColor: 'green',
                    strokeWeight: 1
                };
            } else if (grade > 1 && grade <= 6) {
                return {
                    fillColor: 'yellow',
                    strokeWeight: 1
                };
            } else if (grade > 6) {
                return {
                    fillColor: 'red',
                    strokeWeight: 1
                };
            }
        });
        var e3 = performance.now();
        console.log("3: " + (e3 - s3));

        //layer_footpath.setStyle(function (feature) {
        //    var grade = feature.getProperty('gradepc');
        //    console.log("abc");
        //    if (grade > 0 && grade <= 1) {

        //        return {
        //            fillColor: 'green',
        //            strokeWeight: 1
        //        };
        //    } else if (grade > 1 && grade <= 6) {
        //        return {
        //            fillColor: 'yellow',
        //            strokeWeight: 1
        //        };
        //    } else if (grade > 6) {
        //        return {
        //            fillColor: 'red',
        //            strokeWeight: 1
        //        };
        //    }
        //});

        /**
        * Pedestrian congestion
        */
        const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
            "Jul", "Aug", "Sep", "Oct", "Novr", "Dec"
        ];
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yy = today.getFullYear().toString().substr(-2);
        var mon = monthNames[today.getMonth()];

        if (dd < 10) {
            dd = '0' + dd
        }

        if (mm < 10) {
            mm = '0' + mm
        }

        today = dd + '-' + mon + '-' + yy;
        console.log(today);


        var icon4 = {
            url: "../../Content/images/marker-pedestrian.svg", // url
            scaledSize: new google.maps.Size(20, 27.57), // scaled size
            origin: new google.maps.Point(0, 0), // origin
            anchor: new google.maps.Point(0, 0) // anchor
        };

        // Create marker for Pedestrian congestion
        $.getJSON("https://data.melbourne.vic.gov.au/resource/xbm5-bb4n.json",
            function (data) {
                for (var i = 0; i < data.length; i++) {
                    var sensor = data[i].sensorid;
                    var coor = { lat: parseFloat(data[i].latitude), lng: parseFloat(data[i].longitude) };
                    var ped_marker = new google.maps.Marker({
                        position: coor,
                        map: map,
                        visible: false,
                        icon: icon4,
                        title: "Click for details"
                    });
                    var content = '<div>' + 'Address: ' + data[i].sensorloc + '</div>';
                    ped_marker.content = content;
                    ped_marker.sensor = sensor;
                    infowindow_sensor = new google.maps.InfoWindow();
                    google.maps.event.addListener(ped_marker, 'click', function () {
                        //infowindow_sensor.setContent(this.content);
                        //infowindow_sensor.open(this.getMap(), this);
                        initializeViz(this.sensor, today);

                    })
                    ped_markers.push(ped_marker);
                }
            });

        /**
   * Start on-street parking markers
   */
        var icon1 = {
            url: "../../Content/images/marker-parking.svg", // url
            scaledSize: new google.maps.Size(20, 27.57), // scaled size
            origin: new google.maps.Point(0, 0), // origin
            anchor: new google.maps.Point(0, 0) // anchor
        };

        // Create marker for showing real time on-street parking status
        $.getJSON("https://data.melbourne.vic.gov.au/resource/dtpv-d4pf.json",
            function (data) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].status == "Present") {
                        continue;
                    }
                    var coor = { lat: parseFloat(data[i].lat), lng: parseFloat(data[i].lon) };

                    var sensor_marker = new google.maps.Marker({
                        position: coor,
                        map: map,
                        visible: false,
                        icon: icon1,
                        title: "Click for details"
                    });

                    var content = '<div>' + 'Parking status: ' + data[i].status;
                        //+ '</div>' +
                        //'<div>' + '<a href="' + 'https://www.google.com/maps/dir/?api=1&origin='
                        //+ current_location[0] + ',' + current_location[1]
                        //+ '&destination=' + data[i].lat + ',' + data[i].lon + '" target="_blank">Navigate Me</a>' + '</div>';

                    infowindow_parking = new google.maps.InfoWindow();
                    sensor_marker.content = content;
                    google.maps.event.addListener(sensor_marker, 'click', function () {
                        infowindow_parking.setContent(this.content);
                        infowindow_parking.open(this.getMap(), this);
                    })
                    sensor_markers.push(sensor_marker);
                }

            });
    /**
     * End on-street parking markers
     */


    }

    // Filter for parking space
    function showPark(park) {
        if (document.getElementById('dev').checked) {
            document.getElementById('dev').checked = false;
            unshowDevelopment();
        }

        if (document.getElementById('stp').checked) {
            document.getElementById('stp').checked = false;
            unshowSteepness();
        }

        //if (document.getElementById('con').checked) {
        //    document.getElementById('con').checked = false;
        //    unshowCondition();
        //}

        if (document.getElementById('ped').checked) {
            document.getElementById('ped').checked = false;
            unshowPed();
        }

        if (document.getElementById("sensor").checked) {
            document.getElementById("sensor").checked = false;
            unshowSensor();

        }

        if (document.getElementById("park").checked == true) {
            for (var i = 0; i < park_markers.length; i++) {
                park_markers[i].setVisible(true);
            }
            markerCluster_park = new MarkerClusterer(map, park_markers, {
                imagePath: '../../Content/cluster/m'
            });
            document.getElementById("tab3").click();
        }
        else {
            unshowPark();
            document.getElementById("initialTab").click();
        }
    }

    function unshowPark() {
        for (var i = 0; i < park_markers.length; i++) {
            park_markers[i].setVisible(false);
        }
        infowindow_parking.close();
        markerCluster_park.clearMarkers();
    }

    // Filter for building development
    function showDevelopment() {
        if (document.getElementById('park').checked) {
            document.getElementById('park').checked = false;
            unshowPark();
        }

        //if (document.getElementById('con').checked) {
        //    document.getElementById('con').checked = false;
        //    unshowCondition();
        //}

        if (document.getElementById('stp').checked) {
            document.getElementById('stp').checked = false;
            unshowSteepness();
        }

        if (document.getElementById('ped').checked) {
            document.getElementById('ped').checked = false;
            unshowPed();
        }

        if (document.getElementById("sensor").checked) {
            document.getElementById("sensor").checked = false;
            unshowSensor();

        }

        if (document.getElementById('dev').checked) {
            layer_dev.setMap(map);
            document.getElementById("tab1").click();
            layer_dev.setStyle(function (feature) {
                var status = feature.getProperty('status');
                if (status == 'UNDER CONSTRUCTION') {
                    return {
                        fillColor: 'black',
                        strokeWeight: 0
                    };
                }
                else {
                    return {
                        fillColor: null,
                        strokeWeight: 0,
                        fillOpacity: 0
                    };
                }
            });

        } else {
            unshowDevelopment();
        }
    }

    function unshowDevelopment() {
        layer_dev.setMap(null);
        document.getElementById("initialTab").click();
    }

    // Filter for road condition
    //function showCondition() {
    //    if (document.getElementById('park').checked) {
    //        document.getElementById('park').checked = false;
    //        unshowPark();
    //    }

    //    if (document.getElementById('dev').checked) {
    //        document.getElementById('dev').checked = false;
    //        unshowCondition();
    //    }

    //    if (document.getElementById('stp').checked) {
    //        document.getElementById('stp').checked = false;
    //        unshowSteepness();
    //    }

    //    if (document.getElementById('ped').checked) {
    //        document.getElementById('ped').checked = false;
    //        unshowPed();
    //    }

    //    if (document.getElementById('con').checked) {
    //        layer_condition.setStyle({ visible: true });

    //        layer_dev.setStyle(function (feature) {
    //            var status = feature.getProperty('status');
    //            if (status == 'UNDER CONSTRUCTION') {
    //                return {
    //                    fillColor: 'black',
    //                    strokeWeight: 2,
    //                    strokeColor: 'black'
    //                };
    //            }
    //        });
    //    } else {
    //        unshowCondition();
    //    }
    //}

    //function unshowCondition() {
    //    layer_condition.setStyle({ visible: false });
    //}

    // Filter for foothpath steepness
    function showSteepness() {
        //if (document.getElementById('con').checked) {
        //    document.getElementById('con').checked = false;
        //    unshowCondition();
        //}

        if (document.getElementById('dev').checked) {
            document.getElementById('dev').checked = false;
            unshowDevelopment();
        }

        if (document.getElementById('park').checked) {
            document.getElementById('park').checked = false;
            unshowPark();
        }

        if (document.getElementById('ped').checked) {
            document.getElementById('ped').checked = false;
            unshowPed();
        }

        if (document.getElementById("sensor").checked) {
            document.getElementById("sensor").checked = false;
            unshowSensor();

        }

        if (document.getElementById('stp').checked) {
            document.getElementById("tab2").click();
            layer_footpath.setMap(map);
            layer_footpath.setStyle(function (feature) {
                var grade = feature.getProperty('gradepc');
               // console.log("abc");
                if (grade > 0 && grade <= 1) {

                    return {
                        fillColor: '#000000',
                        strokeWeight: 1,
                        strokeColor: '#000000'
                    };
                } else if (grade > 1 && grade <= 6) {
                    return {
                        fillColor: '#7ED321',
                        strokeWeight: 1,
                        strokeColor: '#7ED321'
                    };
                } else  {
                    return {
                        fillColor: '#D92863',
                        strokeWeight: 1,
                        strokeColor: '#D92863'
                    };
                }
            });
        } else {
            unshowSteepness();
            document.getElementById("initialTab").click();
        }
    }

    function unshowSteepness() {
        layer_footpath.setMap(null);
    }


    // Filter for pedestrian
    function showPed(ped) {
        if (document.getElementById('dev').checked) {
            document.getElementById('dev').checked = false;
            unshowDevelopment();
        }

        if (document.getElementById('stp').checked) {
            document.getElementById('stp').checked = false;
            unshowSteepness();
        }

        //if (document.getElementById('con').checked) {
        //    document.getElementById('con').checked = false;
        //    unshowCondition();
        //}

        if (document.getElementById('park').checked) {
            document.getElementById('park').checked = false;
            unshowPark();
        }

        if (document.getElementById("sensor").checked) {
            document.getElementById("sensor").checked = false;
            unshowSensor();

        }

        if (document.getElementById("ped").checked == true) {
            for (var i = 0; i < ped_markers.length; i++) {
                ped_markers[i].setVisible(true);
            }
            document.getElementById("tab4").click();
        }
        else {
            unshowPed();
            document.getElementById("initialTab").click();
        }
    }

    function unshowPed() {
        for (var i = 0; i < ped_markers.length; i++) {
            ped_markers[i].setVisible(false);
        }
        infowindow_sensor.close();
    }

    //Filter for real time on-street parking
    function showSensor(sensor) {
        if (document.getElementById('dev').checked) {
            document.getElementById('dev').checked = false;
            unshowDevelopment();
        }

        if (document.getElementById('stp').checked) {
            document.getElementById('stp').checked = false;
            unshowSteepness();
        }

        if (document.getElementById('park').checked) {
            document.getElementById('park').checked = false;
            unshowPark();
        }
        if (document.getElementById('ped').checked) {
            document.getElementById('ped').checked = false;
            unshowPed();
        }

        if (document.getElementById("sensor").checked == true) {
            for (var i = 0; i < sensor_markers.length; i++) {
                sensor_markers[i].setVisible(true);
            }
            markerCluster_sensor = new MarkerClusterer(map, sensor_markers, {
                imagePath: '../../Content/cluster/m'
            });

            document.getElementById("tab5").click();

        }
        else {
            unshowSensor();
            document.getElementById("initialTab").click();
        }
    }

    function unshowSensor() {
        for (var i = 0; i < sensor_markers.length; i++) {
            sensor_markers[i].setVisible(false);
        }
        markerCluster_sensor.clearMarkers();
        infowindow_parking.close();
    }

    function handleLocationError(browserHasGeolocation, infowindow, pos) {
        infowindow.setPosition(pos);
        infowindow.setContent(browserHasGeolocation ? 'Error:You need to enable location' : 'Error:Your browser doesn\'t support geolocation.');
    }

    function requestFullscreen() {
        $('#map div.gm-style button[title="Toggle fullscreen view"]').trigger('click');
    }


    function centerTocurrent() {
        //map.setCenter(currentLatLng);
    }

    function showPrintPreview() {
        window.print();
    }

    function showRoute() {
        if (document.getElementById("route").checked) {
            directionsDisplay = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                map: map
            });
            // Try HTML5 geolocation
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var des = @Html.Raw(Json.Encode(Model.geometry.location));
                    var directionsService = new google.maps.DirectionsService();
                    document.getElementById('floating-panel').style.display = "initial";

                    DisplayRoute(directionsService, pos, des);

                    document.getElementById('mode').addEventListener('change', function () {
                        DisplayRoute(directionsService, pos, des);
                    })

                }, function () {
                    handleLocationError(true, infowindow, map.getCenter());
                });
            } else {
                handleLocationError(false, infowindow, map.getCenter());
            }
        } else {
            if (typeof directionsDisplay != 'undefined') {
                directionsDisplay.setMap(null);
                directionsDisplay.setPanel(null);
            }
            document.getElementById('floating-panel').style.display = "none";
            
        }

    }

    function DisplayRoute(directionsService, start, end) {
        var selectedMode = document.getElementById('mode').value;
        var request = {
            origin: start,
            destination: end,
            travelMode: google.maps.TravelMode[selectedMode]
        };
        directionsService.route(request, function (result, status) {
            if (status == 'OK') {

                directionsDisplay.setDirections(result);
                directionsDisplay.setPanel(document.getElementById('arrival-time'));
            } else {
                console.log(status);
            }
        });
    }

    function AjaxUpdateRating_lv1() {
        //var val = parseInt($('#rateBtn1').html());
        var val = @Model.rating_lv1;
        val += 1;
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateRating_lv1","Home")',
            data: JSON.stringify({ place_id: '@Model.place_id', num_lv1: val}),
            dataType: 'json',
            contentType: "application/json",
        }).done(function (data) {
            $('#rateBtn1').html(data);
            UpdateAverage(data, @Model.rating_lv2, @Model.rating_lv3);
        });
    }

    function AjaxUpdateRating_lv2() {
        //var val = parseInt($('#rateBtn2').html());
        var val = @Model.rating_lv2;
        val += 1;
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateRating_lv2","Home")',
            data: JSON.stringify({ place_id: '@Model.place_id', num_lv2: val}),
            dataType: 'json',
            contentType: "application/json",
        }).done(function (data) {
            $('#rateBtn2').html(data);
            UpdateAverage(@Model.rating_lv1, data, @Model.rating_lv3);
        });
    }

    function AjaxUpdateRating_lv3() {
        //var val = parseInt($('#rateBtn3').html());
        var val = @Model.rating_lv3;
        val += 1;
        $.ajax({
            type: 'POST',
            url: '@Url.Action("UpdateRating_lv3","Home")',
            data: JSON.stringify({ place_id: '@Model.place_id', num_lv3: val}),
            dataType: 'json',
            contentType: "application/json",
        }).done(function (data) {
            $('#rateBtn3').html(data);
            UpdateAverage(@Model.rating_lv1, @Model.rating_lv2, data);
        });
    }

    function UpdateAverage(l1, l2, l3) {
        var avg = (l2 + (2 * l3)) / (l1 + l2 + l3);

        document.getElementById("fa-ban").classList.remove("mable-publicRating");
        document.getElementById("fa-frown").classList.remove("mable-publicRating");
        document.getElementById("fa-meh").classList.remove("mable-publicRating");
        document.getElementById("fa-smile").classList.remove("mable-publicRating");


        if (avg <= 0.5) {
            document.getElementById("fa-frown").classList.add("mable-publicRating");
        }
        if (avg > 0.5 && avg <= 1.3) {
            document.getElementById("fa-meh").classList.add("mable-publicRating");
        }
        if (avg > 1.3) {
            document.getElementById("fa-smile").classList.add("mable-publicRating");
        }

        document.getElementById("rating_btns").style.display = "none";
        document.getElementById("text_rated").style.display = "initial";
    }

</script>

<script src="~/Content/js/markerclusterer.js"></script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDgWw5yvhJAS5LsXo2RGJa0o-cPWMNNPLo&libraries=places&callback=initMap">
</script>


