
@{
    ViewBag.Title = "Detail";
    Layout = "~/Views/Shared/_LayoutSearch.cshtml";
}

@model Mable.Classes.PlaceDetail.Result
<div class="section">
    <div class="container-fluid">
        <div class="row">

            <!-- Start Details Content -->
            <div class="col-sm-8 col-sm-offset-2 mable-detail">
                <!-- Image and Place Details -->
                <div class="row ">
                    <!-- Place Photo -->
                    <div class="col-md-4 mable-detail-image text-center">
                        <img class="img-responsive" src="https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=@Model.photo_reference&key=AIzaSyDvXKR7iiGAvHykADgGEOxuurUSr4ukJ08" />

                    </div>
                    <!-- End Photo -->
                    <!-- Place details -->
                    <div class="col-md-8" style="padding-left: 40px;">
                        <!-- back button -->
                        <a href="javascript:history.back()"><i class="fas fa-chevron-left"></i> Back</a>
                        <!-- Place Title -->
                        <h1>
                            @Model.name
                        </h1>
                        @*<div class="mable-detail-accRating">
                    <i class="fas fa-universal-access" data-toggle=“tooltip” title='Accessibility Description'></i>
                    @Model.accessibility_description
                </div>*@
                        <div class="mable-detail-rating">

                            <i class="fas fa-star" data-toggle=“tooltip” title='Google rating'></i>
                            @Model.rating
                        </div>
                        <div class="mable-detail-website">
                            <a href="@Model.website">@Model.website</a>
                        </div>
                        <div class="mable-detail-price">

                        </div>
                        <div>
                            @Model.formatted_address
                        </div>

                    </div>
                    <!-- End place details -->
                </div>
                <!--End row-->
                <!-- Start Buttons-->
                <div class="row">
                    <div class="col-md-12">

                        <div id="buttons" style="display: inline-block;">
                            <div class="col-sm-3">
                                <input type="checkbox" name="filter" id="dev" onclick="showDevelopment(this)">
                                <label for='con'>Footpath Condition</label>

                            </div>
                            <div class="col-sm-2">
                                <input type="checkbox" name="filter" id="stp" onclick="showSteepness(this)">
                                <label for='stp'>Steepness of Footpaths</label>
                            </div>
                            <div class="col-sm-2">
                                <input type="checkbox" name="filter" id="con" onclick="showCondition(this)">
                                <label for='stp'>Road Condition</label>
                            </div>
                            <div class="col-sm-3">
                                <input type="checkbox" name="filter" id="park" onclick="showPark(this)">
                                <label for='park'>Parking</label>
                            </div>

                        </div>

                    </div>
                </div>
                <!-- End buttons-->
                <!--Start map and info-->
                <div class="row">
                    <!-- Start Map-->
                    <div class="col-lg-8">
                        <!-- Start place Map -->
                        <div class="row mable-detail-map clearfix">
                            <div class="col-md-12">
                                <div name="place location" id="map" style="height:300px"></div>
                            </div>
                        </div>
                        <!-- End place map -->
                    </div>
                    <!-- End Map-->
                    <!-- Start Map Info-->
                    <div class="col-lg-4">
                        <div>
                            <h4>Information</h4>
                            
                        </div>
                        <div>
                            <h4>Actions</h4>
                            <button> Current Location</button>
                            <button>Fullscreen</button>
                        </div>
                    </div>
                    <!-- End Map Info-->

                </div>
                <!--End map and info-->
                <div class="row">
                    <div class="col-lg-12">
                        how to get there
                    </div>
                    <div class="col-lg-4">
                        <button>Open in Google Map</button>
                    </div>
                    <div class="col-lg-4">
                        <button>Mobility Map</button>
                    </div>
                    <div class="col-lg-4">
                        <button>Print Map</button>
                    </div>
                </div>
            </div>

        </div>

    </div>

</div>

<script>

    var map;

    var layer_condition;
    var layer_dev;
    var layer_footpath;


    var infowindow_parking;
    var park_markers = [];
    var current_location = [];


    function initMap() {
        var lat = @Model.geometry.location.lat;
        var lng = @Model.geometry.location.lng;
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: lat, lng: lng },
            zoom: 15
        });

        layer_condition = new google.maps.Data({ map: map });
        layer_dev = new google.maps.Data({ map: map });
        layer_footpath = new google.maps.Data({ map: map });

        var infowindow = new google.maps.InfoWindow();

        // Try HTML5 geolocation
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                infowindow.setPosition(pos);
                infowindow.setContent('Your current location');
                //map.setCenter(pos);
            }, function () {
                handleLocationError(true, infowindow, map.getCenter());
            });
        } else {
            handleLocationError(false, infowindow, map.getCenter());
        }

        var service = new google.maps.places.PlacesService(map);

        service.getDetails({
            placeId: '@Model.place_id'
        }, function (place, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                var marker = new google.maps.Marker({
                    map: map,
                    position: place.geometry.location
                });
                google.maps.event.addListener(marker, 'click', function () {
                    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                        'Place ID: ' + place.place_id + '<br>' +
                        place.formatted_address + '</div>');
                    infowindow.open(map, this);
                });
            }
        });

        /**
   * Off street parking markers
   */
        var icon3 = {
            url: "../../Content/images/off-street-parking.png", // url
            scaledSize: new google.maps.Size(20, 37.57), // scaled size
            origin: new google.maps.Point(0, 0), // origin
            anchor: new google.maps.Point(0, 0) // anchor
        };

        // Create marker for showing parking type and parking spaces
        $.getJSON("https://data.melbourne.vic.gov.au/resource/9xmh-yeh2.json",
            function (data) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].parking_type == "Residential") {
                        continue;
                    }
                    if (data[i].parking_type == "Commercial") {
                        data[i].parking_type = "Pay & Park";
                    }
                    var coor = { lat: parseFloat(data[i].y_coordinate), lng: parseFloat(data[i].x_coordinate_2) };
                    var park_marker = new google.maps.Marker({
                        position: coor,
                        map: map,
                        visible: false,
                        icon: icon3,
                        title: "Click for details"
                    });
                    var content = '<div>' + 'Parking Type: ' + data[i].parking_type + '</div>' +
                        '<div>' + 'Parking Spaces: ' + data[i].parking_spaces + '</div>';
                    park_marker.content = content;
                    infowindow_parking = new google.maps.InfoWindow();
                    google.maps.event.addListener(park_marker, 'click', function () {
                        infowindow_parking.setContent(this.content);
                        infowindow_parking.open(this.getMap(), this);
                    })
                    park_markers.push(park_marker);
                }
            });

        //  3D development
        var dev_geojson = @Html.Raw(ViewBag.dev);
        layer_dev.addGeoJson(dev_geojson);

        layer_dev.setStyle(function (feature) {
                    var status = feature.getProperty('status');
                    if (status == 'UNDER CONSTRUCTION') {
                        return {
                            fillColor: 'black',
                            strokeWeight: 1
                        };
                    }
        });
        layer_dev.setStyle({ visible: false });

        //foothpath steepness
        var stp_geojson = @Html.Raw(ViewBag.stp);
        layer_footpath.addGeoJson(stp_geojson);

        layer_footpath.setStyle(function (feature) {
            var grade = feature.getProperty('gradepc');
            console.log("abc");
            if (grade > 0 && grade <= 1) {
                
                return {
                    fillColor: 'green',
                    strokeWeight: 1
                };
            } else if (grade > 1 && grade <= 6) {
                return {
                    fillColor: 'yellow',
                    strokeWeight: 1
                };
            } else if (grade > 6) {
                return {
                    fillColor: 'red',
                    strokeWeight: 1
                };
            }
        });
        layer_footpath.setStyle({ visible: false });


        // Road Condition
        //var con_geojson = @Html.Raw(ViewBag.con);
        //layer_condition.addGeoJson(con_geojson);

        //layer_condition.setStyle({ visible: false });
    }

    // Filter for parking space
    function showPark(park) {
        if (document.getElementById('dev').checked) {
            document.getElementById('dev').checked = false;
            unshowDevelopment();
        }

        if (document.getElementById('stp').checked) {
            document.getElementById('stp').checked = false;
            unshowSteepness();
        }

        if (document.getElementById('con').checked) {
            document.getElementById('con').checked = false;
            unshowCondition();
        }

        if (document.getElementById("park").checked == true) {
            for (var i = 0; i < park_markers.length; i++) {
                park_markers[i].setVisible(true);
            }
        }
        else {
            unshowPark();
        }
    }

    function unshowPark() {
        for (var i = 0; i < park_markers.length; i++) {
            park_markers[i].setVisible(false);
        }
        infowindow_parking.close();
    }

    //
    function showDevelopment() {
        if (document.getElementById('park').checked) {
            document.getElementById('park').checked = false;
            unshowPark();
        }

        if (document.getElementById('con').checked) {
            document.getElementById('con').checked = false;
            unshowCondition();
        }

        if (document.getElementById('stp').checked) {
            document.getElementById('stp').checked = false;
            unshowSteepness();
        }

        if (document.getElementById('dev').checked) {
            layer_dev.setStyle({ visible: true });
        } else {
            unshowDevelopment();
        }
    }

    function unshowDevelopment() {
        layer_dev.setStyle({ visible: false });
    }

    //
    function showCondition() {
        if (document.getElementById('park').checked) {
            document.getElementById('park').checked = false;
            unshowPark();
        }

        if (document.getElementById('dev').checked) {
            document.getElementById('dev').checked = false;
            unshowCondition();
        }

        if (document.getElementById('stp').checked) {
            document.getElementById('stp').checked = false;
            unshowSteepness();
        }

        if (document.getElementById('con').checked) {
            layer_condition.setStyle({ visible: true });

            layer_dev.setStyle(function (feature) {
                var status = feature.getProperty('status');
                if (status == 'UNDER CONSTRUCTION') {
                    return {
                        fillColor: 'black',
                        strokeWeight: 2,
                        strokeColor: 'black'
                    };
                }
            });
        } else {
            unshowCondition();
        }
    }

    function unshowCondition() {
        layer_condition.setStyle({ visible: false });
    }

    //
    function showSteepness() {
        if (document.getElementById('con').checked) {
            document.getElementById('con').checked = false;
            unshowCondition();
        }

        if (document.getElementById('dev').checked) {
            document.getElementById('dev').checked = false;
            unshowDevelopment();
        }

        if (document.getElementById('park').checked) {
            document.getElementById('park').checked = false;
            unshowPark();
        }

        if (document.getElementById('stp').checked) {
            layer_footpath.setStyle({ visible: true });
            layer_footpath.setStyle(function (feature) {
                var grade = feature.getProperty('gradepc');
                console.log("abc");
                if (grade > 0 && grade <= 1) {

                    return {
                        fillColor: 'green',
                        strokeWeight: 2,
                        strokeColor: 'green'
                    };
                } else if (grade > 1 && grade <= 6) {
                    return {
                        fillColor: 'yellow',
                        strokeWeight: 2,
                        strokeColor: 'yellow'
                    };
                } else  {
                    return {
                        fillColor: 'red',
                        strokeWeight: 2,
                        strokeColor: 'red'
                    };
                }
            });
        } else {
            unshowSteepness();
        }
    }

    function unshowSteepness() {
        layer_footpath.setStyle({ visible: false });
    }

    function handleLocationError(browserHasGeolocation, infowindow, pos) {
        infowindow.setPosition(pos);
        infowindow.setContent(browserHasGeolocation ? 'Error:You need to enable location' : 'Error:Your browser doesn\'t support geolocation.');
    }


</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDgWw5yvhJAS5LsXo2RGJa0o-cPWMNNPLo&libraries=places&callback=initMap">
</script>


@*<script>
    $(document).ready(function () {
        $(‘[data - toggle=“tooltip”]’).tooltip();
    });
</script>*@